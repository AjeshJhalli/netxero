@page "/people"
@page "/"
@using Microsoft.Data.Sqlite
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
<PageTitle>People</PageTitle>

<h1>People</h1>

<table class="table">
  <thead>
    <tr>
      <th>Name</th>
      <th>Email</th>
      <th>Phone Number</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    @foreach (var person in people)
    {
      <tr>
        <td>@person.firstName @person.lastName</td>
        <td>@person.emailAddress</td>
        <td>@person.phoneNumber</td>
        <td>
          <a class="btn btn-secondary" href="/person-form?id=@person.id">Edit</a>
          <button class="btn btn-secondary" @onclick="() => DeletePerson(person.id)">Delete</button>
        </td>
      </tr>
    }
  </tbody>
</table>


<a class="btn btn-primary" href="person-form">New</a>

@code {

  private List<PersonService.Person> people = [];

  protected override void OnInitialized()
  {
    using (var connection = new SqliteConnection("Data Source=databases/HotelRoomAllocator.sqlite"))
    {
      connection.Open();

      var command = connection.CreateCommand();
      command.CommandText = @"SELECT id, first_name, last_name, email_address, phone_number FROM person";
      var reader = command.ExecuteReader();

      while (reader.Read())
      {
        PersonService.Person person = new(reader.GetInt32(0), reader.GetString(1), reader.GetString(2), reader.GetString(3), reader.GetString(4));
        people.Add(person);
      }
    }
  }

  public async Task DeletePerson(int id)
  {
    bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this person?");
    if (confirmed)
    {
      PersonService.Delete(id);
      NavigationManager.NavigateTo("/people", forceLoad: true);
    }

  }
}
