@page "/bookings"
@using Microsoft.Data.Sqlite
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
<PageTitle>Bookings</PageTitle>

<h1>Bookings</h1>

<table class="table">
  <thead>
    <tr>
      <th>Booking ID</th>
      <th>Hotel</th>
      <th>Date</th>
      <th>Status</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    @foreach (var booking in bookings)
    {
      <tr>
        <td>@booking.id</td>
        <td>@booking.hotelName</td>
        <td></td>
        <td>@booking.status</td>
        <td>
          <a class="btn btn-secondary" href="/booking-form?id=@booking.id">Edit</a>
          <button class="btn btn-secondary" @onclick="() => DeleteBooking(booking.id)">Delete</button>
        </td>
      </tr>
    }
  </tbody>
</table>


<a class="btn btn-primary" href="booking-form">New</a>

@code {

  private List<BookingService.Booking> bookings = [];

  protected override void OnInitialized()
  {
    using (var connection = new SqliteConnection("Data Source=databases/HotelRoomAllocator.sqlite"))
    {
      connection.Open();

      var command = connection.CreateCommand();
      command.CommandText = @"SELECT booking.id AS booking_id, hotel_id, hotel.name AS hotel_name, status FROM booking LEFT JOIN hotel ON booking.hotel_id = hotel.id";
      var reader = command.ExecuteReader();

      while (reader.Read())
      {
        BookingService.Booking booking = new(reader.GetInt32(0), reader.GetInt32(1), reader.GetString(2), reader.GetString(3));
        bookings.Add(booking);
      }
    }
  }

  public async Task DeleteBooking(int id)
  {
    bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this booking?");
    if (confirmed)
    {
      BookingService.Delete(id);
      NavigationManager.NavigateTo("/bookings", forceLoad: true);
    }

  }
}
